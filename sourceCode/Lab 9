#include <stdio.h>

#define MAX_VERTICES 100

int adjacencyMatrix[MAX_VERTICES][MAX_VERTICES];

void addEdge(int start, int end) {
    adjacencyMatrix[start][end] = 1;
    adjacencyMatrix[end][start] = 1; // Assuming undirected graph
}

void bfsTraversal(int numVertices, int startVertex) {
    int queue[MAX_VERTICES];
    int front = 0, rear = 0;
    int visited[MAX_VERTICES] = {0};

    visited[startVertex] = 1;
    queue[rear++] = startVertex;

    while (front != rear) {
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);

        for (int i = 0; i < numVertices; i++) {
            if (adjacencyMatrix[currentVertex][i] && !visited[i]) {
                visited[i] = 1;
                queue[rear++] = i;
            }
        }
    }
}

int isConnected(int numVertices) {
    int visited[MAX_VERTICES] = {0};

    // Start DFS from the first vertex
    void dfsUtil(int vertex) {
        visited[vertex] = 1;

        for (int i = 0; i < numVertices; i++) {
            if (adjacencyMatrix[vertex][i] && !visited[i]) {
                dfsUtil(i);
            }
        }
    }

    dfsUtil(0);

    // Check if all vertices are visited
    for (int i = 0; i < numVertices; i++) {
        if (!visited[i]) {
            return 0; // Not connected
        }
    }

    return 1; // Connected
}

int main() {
    int numVertices, startVertex;
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            scanf("%d", &adjacencyMatrix[i][j]);
        }
    }

    printf("Enter the starting vertex for BFS traversal: ");
    scanf("%d", &startVertex);

    printf("BFS Traversal starting from vertex %d: ", startVertex);
    bfsTraversal(numVertices, startVertex);

    if (isConnected(numVertices)) {
        printf("\nThe graph is connected.\n");
    } else {
        printf("\nThe graph is not connected.\n");
    }

    return 0;
}
