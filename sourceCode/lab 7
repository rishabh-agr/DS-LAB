#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}


void insertAtBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *head;
    if (*head != NULL) {
        (*head)->prev = newNode;
    }
    *head = newNode;
}


void insertToLeftOfNode(struct Node** head, struct Node* target, int data) {
    if (target == NULL) {
        printf("Target node is NULL, cannot insert to the left.\n");
        return;
    }

    struct Node* newNode = createNode(data);
    newNode->prev = target->prev;
    newNode->next = target;

    if (target->prev != NULL) {
        target->prev->next = newNode;
    } else {
        *head = newNode;
    }

    target->prev = newNode;
}


void display(struct Node* head) {
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

void deleteNode(struct Node** head, int data) {
    struct Node* current = *head;

    while (current != NULL) {
        if (current->data == data) {
            if (current->prev != NULL) {
                current->prev->next = current->next;
            } else {
                *head = current->next;
            }

            if (current->next != NULL) {
                current->next->prev = current->prev;
            }

            free(current);
            return;
        }
        current = current->next;
    }
}



int main() {
    struct Node* head = NULL;

    insertAtBeginning(&head, 3);
    insertAtBeginning(&head, 2);
    insertAtBeginning(&head, 1);

    display(head);

    struct Node* targetNode = head->next;
    insertToLeftOfNode(&head, targetNode, 4);

    display(head);

    deleteNode(&head,3);
    display(head);

    return 0;
}
