#include <stdio.h>

#define TABLE_SIZE 10

int hash_table[TABLE_SIZE];

// Function to initialize hash table
void initializeHashTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        hash_table[i] = -1; // -1 indicates empty slot
    }
}

// Function to calculate hash value using remainder method
int hash(int key) {
    return key % TABLE_SIZE;
}

// Function to insert a value into the hash table using linear probing
void insert(int key) {
    int hkey = hash(key);
    int index = hkey;
    int i = 0;

    while (hash_table[index] != -1) {
        i++;
        index = (hkey + i) % TABLE_SIZE;
        if (i == TABLE_SIZE) {
            printf("Hash table is full. Unable to insert key %d\n", key);
            return;
        }
    }

    hash_table[index] = key;
}

// Function to search for a value in the hash table using linear probing
void search(int key) {
    int hkey = hash(key);
    int index = hkey;
    int i = 0;

    while (hash_table[index] != key) {
        i++;
        index = (hkey + i) % TABLE_SIZE;
        if (hash_table[index] == -1 || i == TABLE_SIZE) {
            printf("Key %d not found\n", key);
            return;
        }
    }

    printf("Key %d found at index %d\n", key, index);
}

// Function to display the hash table
void displayHashTable() {
    printf("Hash Table:\n");
    for (int i = 0; i < TABLE_SIZE; i++) {
        printf("%d: ", i);
        if (hash_table[i] != -1) {
            printf("%d", hash_table[i]);
        }
        printf("\n");
    }
}

int main() {
    initializeHashTable();

    insert(12);
    insert(25);
    insert(35);
    insert(26);
    insert(41);

    displayHashTable();

    search(35);
    search(26);
    search(50);

    return 0;
}
